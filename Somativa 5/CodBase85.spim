.data
	qline: 		.asciiz "\n"
	input_str: 	.space 34
	str_decimal: 	.space 256
			.align 2 
	str_pot85:	.space 256
			.align 2 
	input_inv: 	.asciiz "Entrada invalida.\n"
	ASCII85:	.byte    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '.', '-', ':', '+', '=', '^', '!', '/', '*', '?', '&', '<', '>', '(', ')', '[', ']', '{', '}', '@', '%', '$', '#'
.text

main:			
	li	$v0, 8		# Ler string de entrada
	la	$a0, input_str
	la 	$a1, 34
	syscall

	jal 	calc_str_size
		
	jal 	str_to_decimal_and_pot85
	
	jal 	print_result
	
	li 	$v0, 4		# Printa quebra de linha
	la 	$a0, qline
	syscall

	j 	end

end:
	li 	$v0, 10
	syscall
		
print_input_inv:
	li 	$v0, 4
	la 	$a0, input_inv
	syscall
	j 	end
	
print_result:			# Printa os caracteres de acordo com a tabela ascii85
	addi 	$t6, $t6, -4
	la 	$t1, ($t7)
	mul 	$t1, $t1, 4
	addi 	$t2, $t7, -1
	add 	$t3, $t1, $t2 

	loop_print_result:
	bltz 	$t3, end_print_result
	lw 	$t4, str_pot85($t6)
	lb 	$a0, ASCII85($t4)
	li	$v0, 11
	syscall
	addi 	$t3, $t3, -1 
	addi 	$t6, $t6, -4 
	j 	loop_print_result
	end_print_result: jr	$ra
		
calc_str_size:					# Calcula o tamanho da string de entrada
	lb 	$t0, qline
	li 	$t1, 0
	li	$t2, 0	
	li	$t5, 0
	loop_calc:
	lb  	$t3, input_str($t2)		# Carrega um byte da string de entrada a cada loop, sempre passando para o proximo 
	bne 	$t3, $t0, continue_loop_calc	# Se o byte carregado nao for igual a quebra de linha continua o loop
	j	else	
	bnez 	$t3, continue_loop_calc		# Se o byte carregado nao for igual a 0 continua o loop tbm
	else:			# Se nenhum dos ifs acima forem satisfeitos, testa se  $t1 é multiblo de 4
	rem 	$t2, $t1, 4	# Se for multipliplo de 4 volta pra main, se nao, a entrada é invalida
	beqz 	$t2, end_calc	# Ou seja, vai entrar em else se for entrada invalida, ou se já terminou de contar quantos bytes tem a entrada
	j	print_input_inv
	continue_loop_calc:
	sll 	$t4, $t4, 8 			# Vai pro proximo byte, $t4 guarda str em decimal
	or 	$t4, $t4, $t3 			# Adiciona o byte 
	addi 	$t1, $t1, 1
	addi 	$t2, $t2, 1			
	rem 	$t6, $t2, 4			
	bnez 	$t6, loop_calc
	sw 	$t4, str_decimal($t5)		# Se $t2 for multiplo de 4 adicione oq está detro de $t4 em str_decimal
	addi 	$t5, $t5, 4 			# Pro proximo decimal que vir 
	addi 	$t7, $t7, 1 			# $t7 conta a cada 4 caracteres da entrada
	j 	loop_calc		
	end_calc: jr 	$ra
		
str_to_decimal_and_pot85:
	la 	$t0, ($t7)				
	addi 	$t0, $t0, -1
	mul 	$t1, $t0, 4 			# Multiplicando $t7 por 4 dá o total de caracteres da entrada
	loop_decimal:
	bltz 	$t0, end_str_to_decimal_and_pot85 
	lw 	$t2, str_decimal($t1)
	la 	$t3, ($t2) 
	li 	$t4, 0 
						# Faz a conversão para base85
	loop_pot85:
	beq 	$t4, 5, continue_to_decimal
	rem 	$t5, $t3, 85			
	div 	$t3, $t3, 85
			
	sw 	$t5, str_pot85($t6)	# O resto de cada divisão vai sendo colocado em str_pot85
	addi 	$t4, $t4, 1
	addi 	$t6, $t6, 4 
	j 	loop_pot85
	
	continue_to_decimal: 
	addi 	$t0, $t0, -1 
	addi 	$t1, $t1, -4
	j 	loop_decimal
	end_str_to_decimal_and_pot85: jr 	$ra